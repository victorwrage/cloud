package com.baibao.cloud.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.baibao.cloud.WDTMerItem;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "WDTMER_ITEM".
*/
public class WDTMerItemDao extends AbstractDao<WDTMerItem, Long> {

    public static final String TABLENAME = "WDTMER_ITEM";

    /**
     * Properties of entity WDTMerItem.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Code = new Property(1, String.class, "code", false, "CODE");
        public final static Property Barcode = new Property(2, String.class, "barcode", false, "BARCODE");
        public final static Property Type_code = new Property(3, String.class, "type_code", false, "TYPE_CODE");
        public final static Property Name = new Property(4, String.class, "name", false, "NAME");
        public final static Property Unit = new Property(5, String.class, "unit", false, "UNIT");
        public final static Property Stock = new Property(6, String.class, "stock", false, "STOCK");
        public final static Property Price = new Property(7, String.class, "price", false, "PRICE");
        public final static Property Purchase = new Property(8, String.class, "purchase", false, "PURCHASE");
        public final static Property Address = new Property(9, String.class, "address", false, "ADDRESS");
        public final static Property Createtime = new Property(10, String.class, "createtime", false, "CREATETIME");
        public final static Property Mem_price = new Property(11, String.class, "mem_price", false, "MEM_PRICE");
        public final static Property Company_id = new Property(12, String.class, "company_id", false, "COMPANY_ID");
        public final static Property Total_num = new Property(13, String.class, "total_num", false, "TOTAL_NUM");
        public final static Property Minstockm = new Property(14, String.class, "minstockm", false, "MINSTOCKM");
        public final static Property Remark = new Property(15, String.class, "remark", false, "REMARK");
    };


    public WDTMerItemDao(DaoConfig config) {
        super(config);
    }
    
    public WDTMerItemDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"WDTMER_ITEM\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"CODE\" TEXT," + // 1: code
                "\"BARCODE\" TEXT," + // 2: barcode
                "\"TYPE_CODE\" TEXT," + // 3: type_code
                "\"NAME\" TEXT," + // 4: name
                "\"UNIT\" TEXT," + // 5: unit
                "\"STOCK\" TEXT," + // 6: stock
                "\"PRICE\" TEXT," + // 7: price
                "\"PURCHASE\" TEXT," + // 8: purchase
                "\"ADDRESS\" TEXT," + // 9: address
                "\"CREATETIME\" TEXT," + // 10: createtime
                "\"MEM_PRICE\" TEXT," + // 11: mem_price
                "\"COMPANY_ID\" TEXT," + // 12: company_id
                "\"TOTAL_NUM\" TEXT," + // 13: total_num
                "\"MINSTOCKM\" TEXT," + // 14: minstockm
                "\"REMARK\" TEXT);"); // 15: remark
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"WDTMER_ITEM\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, WDTMerItem entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String code = entity.getCode();
        if (code != null) {
            stmt.bindString(2, code);
        }
 
        String barcode = entity.getBarcode();
        if (barcode != null) {
            stmt.bindString(3, barcode);
        }
 
        String type_code = entity.getType_code();
        if (type_code != null) {
            stmt.bindString(4, type_code);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(5, name);
        }
 
        String unit = entity.getUnit();
        if (unit != null) {
            stmt.bindString(6, unit);
        }
 
        String stock = entity.getStock();
        if (stock != null) {
            stmt.bindString(7, stock);
        }
 
        String price = entity.getPrice();
        if (price != null) {
            stmt.bindString(8, price);
        }
 
        String purchase = entity.getPurchase();
        if (purchase != null) {
            stmt.bindString(9, purchase);
        }
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(10, address);
        }
 
        String createtime = entity.getCreatetime();
        if (createtime != null) {
            stmt.bindString(11, createtime);
        }
 
        String mem_price = entity.getMem_price();
        if (mem_price != null) {
            stmt.bindString(12, mem_price);
        }
 
        String company_id = entity.getCompany_id();
        if (company_id != null) {
            stmt.bindString(13, company_id);
        }
 
        String total_num = entity.getTotal_num();
        if (total_num != null) {
            stmt.bindString(14, total_num);
        }
 
        String minstockm = entity.getMinstockm();
        if (minstockm != null) {
            stmt.bindString(15, minstockm);
        }
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(16, remark);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public WDTMerItem readEntity(Cursor cursor, int offset) {
        WDTMerItem entity = new WDTMerItem( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // code
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // barcode
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // type_code
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // name
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // unit
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // stock
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // price
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // purchase
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // address
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // createtime
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // mem_price
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // company_id
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // total_num
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // minstockm
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15) // remark
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, WDTMerItem entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCode(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setBarcode(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setType_code(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setUnit(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setStock(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setPrice(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setPurchase(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setAddress(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setCreatetime(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setMem_price(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setCompany_id(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setTotal_num(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setMinstockm(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setRemark(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(WDTMerItem entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(WDTMerItem entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
